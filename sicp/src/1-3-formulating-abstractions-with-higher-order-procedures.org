#+html_head: <link rel="stylesheet" href="css/org-page.css"/>
#+property: tangle ch_1_3.rs
#+title: 1-3 Formulating Abstractions with Higher-Order Procedures

* 1-3-1 Procedures as Arguments

  #+begin_src jojo
  (= (sum-integers a b)
     (if (gt a b)
       0
       (add a (sum-integers (add a 1) b))))

  (assert (eq 5050 (sum-integers 0 100)))

  (cube x) = (mul x (mul x x))

  (= (sum-cubes a b)
     (if (gt a b)
       0
       (add (cube a)
            (sum-cubes (add a 1) b))))

  (assert (eq (sum-cubes 0 3)
              (add (cube 1)
                   (add (cube 2)
                        (cube 3)))))

  (= (pi-sum a b)
     (if (gt a b)
       0
       (add (div 1 (mul a (add a 2)))
            (pi-sum (add a 4) b))))

  (= pi 3.1415926)

  (assert (lt (abs (sub pi
                        (mul 8 (pi-sum 1 10000))))
              0.001))

  (= assert-delta
     (macro [body]
       (= delta (car body))
       (= a (car (cdr body)))
       (= b (car (cdr (cdr body))))
       `(assert (lt (abs (sub ~a ~b)) ~delta))))

  (assert-delta 0.001
    (mul 8 (pi-sum 1 10000)) pi)

  (= (sum term a next b)
     (if (gt a b)
       0
       (add (term a)
            (sum term (next a) next b))))

  (= (sum-cubes a b)
     (sum cube a inc b))

  (assert (eq (sum-cubes 0 3)
              (add (cube 1)
                   (add (cube 2)
                        (cube 3)))))

  (assert (eq (sum-cubes 1 10)
              3025))

  (= (identity x) x)

  (= (sum-integers a b)
     (sum identity a inc b))

  (assert (eq 5050 (sum-integers 0 100)))

  (= (pi-sum a b)
     (= (pi-term x) (div 1 (mul x (add x 2))))
     (= (pi-next x) (add x 4))
     (sum pi-term a pi-next b))


  (assert-delta 0.001
    pi (mul 8 (pi-sum 1 10000)))

  (= (integral f a b dx)
     (= (add-dx x) (add x dx))
     (mul (sum f (add a (div dx 2)) add-dx b)
          dx))

  (assert-delta 0.001
    (integral cube 0 1 0.001)
    (div 1 4))
  #+end_src

* Exercise 1.29 -- Simpson's Rule for numerical integration

  #+begin_src jojo
  (= (simpson-integral f a b n)
     (= h (div (sub b a) n))
     (= (simpson-coefficient k)
        (cond [(or (eq 0 k) (eq n k)) 1]
              [(odd-p k) 4]
              [(even-p k) 2]))
     (= (simpson-term k)
        (mul (simpson-coefficient k)
             (f (add a (mul k h)))))
     (mul (sum simpson-term 0 inc n)
          (div h 3)))

  (assert-delta 0.0001
    (simpson-integral cube 0 1 100)
    (div 1 4))
  #+end_src

* Exercise 1.30 -- sum-iter

  #+begin_src jojo
  (note we do not have letrec
    (= (sum term a next b)
       (= (iter a result)
          (if (gt a b)
            result
            (iter (next a) (add (term a) result))))
       (iter a 0)))

  (= (sum-iter term a next b result)
     (if (gt a b)
       result
       (sum-iter term (next a) next b (add (term a) result))))

  (= (sum term a next b)
     (sum-iter term a next b 0))

  (= (sum-cubes a b)
     (sum cube a inc b))

  (assert (eq (sum-cubes 0 3)
              (add (cube 1)
                   (add (cube 2)
                        (cube 3)))))

  (assert (eq (sum-cubes 1 10)
              3025))
  #+end_src

* Exercise 1.31 -- Wallis Product

  #+begin_src jojo
  (= (product term a next b)
     (if (gt a b)
       1
       (mul (term a)
            (product term (next a) next b))))

  (= (wallis-product a b)
     (= (wallis-term x)
        (div (mul (add (mul 2 x) 0) (add (mul 2 x) 2))
             (mul (add (mul 2 x) 1) (add (mul 2 x) 1))))
     (product wallis-term a inc b))

  (assert-delta 0.001
    (wallis-product 1 1000)
    (div pi 4))
  #+end_src

* Exercise 1.32 -- accumulate

  #+begin_src jojo
  (= (accumulate combiner null-value
                 term a next b)
     (if (gt a b)
       null-value
       (combiner (term a)
                 (accumulate combiner null-value
                             term (next a) next b))))

  (= (sum term a next b)
     (accumulate add 0 term a next b))

  (= (product term a next b)
     (accumulate mul 1 term a next b))

  (= (pi-sum a b)
     (= (pi-term x) (div 1 (mul x (add x 2))))
     (= (pi-next x) (add x 4))
     (sum pi-term a pi-next b))

  (assert-delta 0.001
    pi
    (mul 8 (pi-sum 1 10000)))

  (= (wallis-product a b)
     (= (wallis-term x)
        (div (mul (add (mul 2 x) 0) (add (mul 2 x) 2))
             (mul (add (mul 2 x) 1) (add (mul 2 x) 1))))
     (product wallis-term a inc b))

  (assert-delta 0.001
    (wallis-product 1 1000)
    (div pi 4))
  #+end_src

* Exercise 1.33 -- filtered-accumulate

  #+begin_src jojo
  (= (filtered-accumulate
      combiner null-value
      term a next b
      filter)
     (if (gt a b)
       null-value
       (if (filter a)
         (combiner (term a)
                   (filtered-accumulate
                    combiner null-value
                    term (next a) next b
                    filter))
         (filtered-accumulate
          combiner null-value
          term (next a) next b
          filter))))

  (= section-1-2
     (load "1-2-procedures-and-the-processes-they-generate.jo"))

  (= prime-p section-1-2.prime-p)

  (= (sum-prime-square a b)
     (filtered-accumulate
      add 0
      identity a inc b
      prime-p))

  (assert (eq (sum-prime-square 0 10)
              (add 1 (add 2 (add 3 (add 5 7))))))
  #+end_src

* 1-3-2 Constructing Procedures Using Lambda

  #+begin_src jojo
  (= (pi-sum a b)
     (sum (lambda [x] (div 1 (mul x (add x 2))))
          a
          (lambda [x] (add x 4))
          b))

  (assert-delta 0.001
    pi (mul 8 (pi-sum 1 10000)))

  (= (integral f a b dx)
     (mul (sum f (add a (div dx 2))
               (lambda [x] (add x dx))
               b)
          dx))

  (assert-delta 0.001
    (integral cube 0 1 0.001)
    (div 1 4))
  #+end_src

* 1-3-3 Procedures as General Methods

*** Finding roots of equations by the half-interval method

    #+begin_src jojo
    (= (average x y) (div (add x y) 2))

    (= (positive-p x) (gt x 0))
    (= (negative-p x) (lt x 0))

    (= (search f neg-point pos-point)
       (= midpoint (average neg-point pos-point))
       (if (close-enough-p neg-point pos-point)
         midpoint
         (let [(test-value (f midpoint))]
           (cond
             [(positive-p test-value)
              (search f neg-point midpoint)]
             [(negative-p test-value)
              (search f midpoint pos-point)]
             [else midpoint]))))

    (= (close-enough-p x y)
       (lt (abs (sub x y)) 0.001))

    (= (half-interval-method f a b)
       (let [(a-value (f a))
             (b-value (f b))]
         (cond [(and (negative-p a-value)
                     (positive-p b-value))
                (search f a b)]
               [(and (negative-p b-value)
                     (positive-p a-value))
                (search f b a)]
               [else
                (println "- half-interval-method")
                (println "  values are not of opposite sign")
                (print "  a : ") (println a)
                (print "  b : ") (println b)])))

    (assert-delta 0.01
      (half-interval-method num-sin 2 4)
      3.14)

    (assert-delta 0.01
      (half-interval-method
       (lambda [x] (mul (sub x 1) (sub x 3)))
       0
       2)
      1)
    #+end_src

*** [todo] Finding fixed points of functions

    #+begin_src jojo
    (= tolerance 0.00001)
    #+end_src

* 1-3-4 Procedures as Returned Values
